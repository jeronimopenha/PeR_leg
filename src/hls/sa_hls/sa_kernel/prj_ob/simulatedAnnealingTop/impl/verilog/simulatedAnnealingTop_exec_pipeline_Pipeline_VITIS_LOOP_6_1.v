// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module simulatedAnnealingTop_exec_pipeline_Pipeline_VITIS_LOOP_6_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        st1_m_fifo_a_m_arr_th_idx_V_address0,
        st1_m_fifo_a_m_arr_th_idx_V_ce0,
        st1_m_fifo_a_m_arr_th_idx_V_we0,
        st1_m_fifo_a_m_arr_th_idx_V_d0,
        st1_m_fifo_a_m_arr_cell_V_address0,
        st1_m_fifo_a_m_arr_cell_V_ce0,
        st1_m_fifo_a_m_arr_cell_V_we0,
        st1_m_fifo_a_m_arr_cell_V_d0,
        st1_m_fifo_a_m_arr_node_V_address0,
        st1_m_fifo_a_m_arr_node_V_ce0,
        st1_m_fifo_a_m_arr_node_V_we0,
        st1_m_fifo_a_m_arr_node_V_d0,
        st1_m_fifo_b_m_arr_th_idx_V_address0,
        st1_m_fifo_b_m_arr_th_idx_V_ce0,
        st1_m_fifo_b_m_arr_th_idx_V_we0,
        st1_m_fifo_b_m_arr_th_idx_V_d0,
        st1_m_fifo_b_m_arr_cell_V_address0,
        st1_m_fifo_b_m_arr_cell_V_ce0,
        st1_m_fifo_b_m_arr_cell_V_we0,
        st1_m_fifo_b_m_arr_cell_V_d0,
        st1_m_fifo_b_m_arr_node_V_address0,
        st1_m_fifo_b_m_arr_node_V_ce0,
        st1_m_fifo_b_m_arr_node_V_we0,
        st1_m_fifo_b_m_arr_node_V_d0,
        st1_m_fifo_a_m_size_V_out,
        st1_m_fifo_a_m_size_V_out_ap_vld,
        st1_m_fifo_a_m_rear_V_7_out,
        st1_m_fifo_a_m_rear_V_7_out_ap_vld,
        st1_m_fifo_b_m_size_V_out,
        st1_m_fifo_b_m_size_V_out_ap_vld,
        st1_m_fifo_b_m_rear_V_7_out,
        st1_m_fifo_b_m_rear_V_7_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 12'd1;
parameter    ap_ST_fsm_pp0_stage1 = 12'd2;
parameter    ap_ST_fsm_pp0_stage2 = 12'd4;
parameter    ap_ST_fsm_pp0_stage3 = 12'd8;
parameter    ap_ST_fsm_pp0_stage4 = 12'd16;
parameter    ap_ST_fsm_pp0_stage5 = 12'd32;
parameter    ap_ST_fsm_pp0_stage6 = 12'd64;
parameter    ap_ST_fsm_pp0_stage7 = 12'd128;
parameter    ap_ST_fsm_pp0_stage8 = 12'd256;
parameter    ap_ST_fsm_pp0_stage9 = 12'd512;
parameter    ap_ST_fsm_pp0_stage10 = 12'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] st1_m_fifo_a_m_arr_th_idx_V_address0;
output   st1_m_fifo_a_m_arr_th_idx_V_ce0;
output   st1_m_fifo_a_m_arr_th_idx_V_we0;
output  [7:0] st1_m_fifo_a_m_arr_th_idx_V_d0;
output  [3:0] st1_m_fifo_a_m_arr_cell_V_address0;
output   st1_m_fifo_a_m_arr_cell_V_ce0;
output   st1_m_fifo_a_m_arr_cell_V_we0;
output  [7:0] st1_m_fifo_a_m_arr_cell_V_d0;
output  [3:0] st1_m_fifo_a_m_arr_node_V_address0;
output   st1_m_fifo_a_m_arr_node_V_ce0;
output   st1_m_fifo_a_m_arr_node_V_we0;
output  [7:0] st1_m_fifo_a_m_arr_node_V_d0;
output  [3:0] st1_m_fifo_b_m_arr_th_idx_V_address0;
output   st1_m_fifo_b_m_arr_th_idx_V_ce0;
output   st1_m_fifo_b_m_arr_th_idx_V_we0;
output  [7:0] st1_m_fifo_b_m_arr_th_idx_V_d0;
output  [3:0] st1_m_fifo_b_m_arr_cell_V_address0;
output   st1_m_fifo_b_m_arr_cell_V_ce0;
output   st1_m_fifo_b_m_arr_cell_V_we0;
output  [7:0] st1_m_fifo_b_m_arr_cell_V_d0;
output  [3:0] st1_m_fifo_b_m_arr_node_V_address0;
output   st1_m_fifo_b_m_arr_node_V_ce0;
output   st1_m_fifo_b_m_arr_node_V_we0;
output  [7:0] st1_m_fifo_b_m_arr_node_V_d0;
output  [7:0] st1_m_fifo_a_m_size_V_out;
output   st1_m_fifo_a_m_size_V_out_ap_vld;
output  [7:0] st1_m_fifo_a_m_rear_V_7_out;
output   st1_m_fifo_a_m_rear_V_7_out_ap_vld;
output  [7:0] st1_m_fifo_b_m_size_V_out;
output   st1_m_fifo_b_m_size_V_out_ap_vld;
output  [7:0] st1_m_fifo_b_m_rear_V_7_out;
output   st1_m_fifo_b_m_rear_V_7_out_ap_vld;

reg ap_idle;
reg st1_m_fifo_a_m_arr_th_idx_V_ce0;
reg st1_m_fifo_a_m_arr_th_idx_V_we0;
reg st1_m_fifo_a_m_arr_cell_V_ce0;
reg st1_m_fifo_a_m_arr_cell_V_we0;
reg st1_m_fifo_a_m_arr_node_V_ce0;
reg st1_m_fifo_a_m_arr_node_V_we0;
reg st1_m_fifo_b_m_arr_th_idx_V_ce0;
reg st1_m_fifo_b_m_arr_th_idx_V_we0;
reg st1_m_fifo_b_m_arr_cell_V_ce0;
reg st1_m_fifo_b_m_arr_cell_V_we0;
reg st1_m_fifo_b_m_arr_node_V_ce0;
reg st1_m_fifo_b_m_arr_node_V_we0;
reg st1_m_fifo_a_m_size_V_out_ap_vld;
reg st1_m_fifo_a_m_rear_V_7_out_ap_vld;
reg st1_m_fifo_b_m_size_V_out_ap_vld;
reg st1_m_fifo_b_m_rear_V_7_out_ap_vld;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state14_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln1027_reg_417;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] st1_m_fifo_a_m_size_V_2_reg_411;
wire   [0:0] icmp_ln1027_fu_223_p2;
wire   [0:0] icmp_ln1019_fu_235_p2;
reg   [0:0] icmp_ln1019_reg_421;
reg   [7:0] st1_m_fifo_b_m_size_V_1_reg_430;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln1019_1_fu_274_p2;
reg   [0:0] icmp_ln1019_1_reg_435;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln541_fu_322_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln541_1_fu_352_p1;
wire    ap_block_pp0_stage1;
reg   [2:0] i_V_fu_60;
wire   [2:0] i_V_2_fu_229_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_V_1;
reg   [7:0] st1_m_fifo_b_m_size_V_fu_64;
wire   [7:0] st1_m_fifo_b_m_size_V_2_fu_334_p2;
reg   [7:0] st1_m_fifo_a_m_size_V_fu_68;
wire   [7:0] st1_m_fifo_a_m_size_V_3_fu_304_p2;
wire    ap_block_pp0_stage11_11001;
reg   [7:0] ap_sig_allocacmp_st1_m_fifo_a_m_size_V_2;
reg   [7:0] lhs_fu_72;
wire  signed [7:0] sext_ln16_1_fu_348_p1;
reg   [7:0] ap_sig_allocacmp_lhs_load_1;
reg   [7:0] lhs_1_fu_76;
wire  signed [7:0] sext_ln16_fu_318_p1;
reg   [7:0] ap_sig_allocacmp_lhs_1_load_1;
wire    ap_block_pp0_stage1_01001;
wire  signed [7:0] sext_ln1495_fu_244_p0;
wire  signed [8:0] sext_ln1495_fu_244_p1;
wire   [8:0] grp_fu_254_p0;
wire   [4:0] grp_fu_254_p1;
wire  signed [7:0] sext_ln1495_1_fu_283_p0;
wire  signed [8:0] sext_ln1495_1_fu_283_p1;
wire   [8:0] grp_fu_293_p0;
wire   [4:0] grp_fu_293_p1;
wire    ap_block_pp0_stage11;
wire   [4:0] grp_fu_254_p2;
wire  signed [4:0] st1_m_fifo_a_m_rear_V_fu_314_p1;
wire   [4:0] grp_fu_293_p2;
wire  signed [4:0] st1_m_fifo_b_m_rear_V_fu_344_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [11:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

simulatedAnnealingTop_srem_9ns_5ns_5_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
srem_9ns_5ns_5_13_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_254_p0),
    .din1(grp_fu_254_p1),
    .ce(1'b1),
    .dout(grp_fu_254_p2)
);

simulatedAnnealingTop_srem_9ns_5ns_5_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
srem_9ns_5ns_5_13_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_293_p0),
    .din1(grp_fu_293_p1),
    .ce(1'b1),
    .dout(grp_fu_293_p2)
);

simulatedAnnealingTop_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage11_subdone) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1027_fu_223_p2 == 1'd0))) begin
            i_V_fu_60 <= i_V_2_fu_229_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_fu_60 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lhs_1_fu_76 <= 8'd255;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1019_reg_421 == 1'd0))) begin
            lhs_1_fu_76 <= sext_ln16_fu_318_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        lhs_fu_72 <= 8'd255;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1019_1_reg_435 == 1'd0))) begin
        lhs_fu_72 <= sext_ln16_1_fu_348_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1019_fu_235_p2 == 1'd1) & (icmp_ln1027_fu_223_p2 == 1'd0))) begin
        st1_m_fifo_a_m_size_V_fu_68 <= 8'd10;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        st1_m_fifo_a_m_size_V_fu_68 <= 8'd0;
    end else if (((icmp_ln1027_reg_417 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln1019_reg_421 == 1'd0))) begin
        st1_m_fifo_a_m_size_V_fu_68 <= st1_m_fifo_a_m_size_V_3_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        st1_m_fifo_b_m_size_V_fu_64 <= 8'd0;
    end else if (((icmp_ln1027_reg_417 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1019_1_fu_274_p2 == 1'd1))) begin
        st1_m_fifo_b_m_size_V_fu_64 <= 8'd10;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1019_1_reg_435 == 1'd0))) begin
        st1_m_fifo_b_m_size_V_fu_64 <= st1_m_fifo_b_m_size_V_2_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_417 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln1019_1_reg_435 <= icmp_ln1019_1_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_fu_223_p2 == 1'd0))) begin
        icmp_ln1019_reg_421 <= icmp_ln1019_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1027_reg_417 <= icmp_ln1027_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        st1_m_fifo_a_m_size_V_2_reg_411 <= ap_sig_allocacmp_st1_m_fifo_a_m_size_V_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        st1_m_fifo_b_m_size_V_1_reg_430 <= st1_m_fifo_b_m_size_V_fu_64;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_417 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage11_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_V_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_V_1 = i_V_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_lhs_1_load_1 = 8'd255;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1019_reg_421 == 1'd0))) begin
            ap_sig_allocacmp_lhs_1_load_1 = sext_ln16_fu_318_p1;
        end else begin
            ap_sig_allocacmp_lhs_1_load_1 = lhs_1_fu_76;
        end
    end else begin
        ap_sig_allocacmp_lhs_1_load_1 = lhs_1_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1019_1_reg_435 == 1'd0))) begin
        ap_sig_allocacmp_lhs_load_1 = sext_ln16_1_fu_348_p1;
    end else begin
        ap_sig_allocacmp_lhs_load_1 = lhs_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_st1_m_fifo_a_m_size_V_2 = 8'd0;
    end else begin
        ap_sig_allocacmp_st1_m_fifo_a_m_size_V_2 = st1_m_fifo_a_m_size_V_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        st1_m_fifo_a_m_arr_cell_V_ce0 = 1'b1;
    end else begin
        st1_m_fifo_a_m_arr_cell_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1019_reg_421 == 1'd0))) begin
        st1_m_fifo_a_m_arr_cell_V_we0 = 1'b1;
    end else begin
        st1_m_fifo_a_m_arr_cell_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        st1_m_fifo_a_m_arr_node_V_ce0 = 1'b1;
    end else begin
        st1_m_fifo_a_m_arr_node_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1019_reg_421 == 1'd0))) begin
        st1_m_fifo_a_m_arr_node_V_we0 = 1'b1;
    end else begin
        st1_m_fifo_a_m_arr_node_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        st1_m_fifo_a_m_arr_th_idx_V_ce0 = 1'b1;
    end else begin
        st1_m_fifo_a_m_arr_th_idx_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1019_reg_421 == 1'd0))) begin
        st1_m_fifo_a_m_arr_th_idx_V_we0 = 1'b1;
    end else begin
        st1_m_fifo_a_m_arr_th_idx_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_417 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        st1_m_fifo_a_m_rear_V_7_out_ap_vld = 1'b1;
    end else begin
        st1_m_fifo_a_m_rear_V_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_417 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        st1_m_fifo_a_m_size_V_out_ap_vld = 1'b1;
    end else begin
        st1_m_fifo_a_m_size_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        st1_m_fifo_b_m_arr_cell_V_ce0 = 1'b1;
    end else begin
        st1_m_fifo_b_m_arr_cell_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1019_1_reg_435 == 1'd0))) begin
        st1_m_fifo_b_m_arr_cell_V_we0 = 1'b1;
    end else begin
        st1_m_fifo_b_m_arr_cell_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        st1_m_fifo_b_m_arr_node_V_ce0 = 1'b1;
    end else begin
        st1_m_fifo_b_m_arr_node_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1019_1_reg_435 == 1'd0))) begin
        st1_m_fifo_b_m_arr_node_V_we0 = 1'b1;
    end else begin
        st1_m_fifo_b_m_arr_node_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        st1_m_fifo_b_m_arr_th_idx_V_ce0 = 1'b1;
    end else begin
        st1_m_fifo_b_m_arr_th_idx_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1019_1_reg_435 == 1'd0))) begin
        st1_m_fifo_b_m_arr_th_idx_V_we0 = 1'b1;
    end else begin
        st1_m_fifo_b_m_arr_th_idx_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_417 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        st1_m_fifo_b_m_rear_V_7_out_ap_vld = 1'b1;
    end else begin
        st1_m_fifo_b_m_rear_V_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_417 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        st1_m_fifo_b_m_size_V_out_ap_vld = 1'b1;
    end else begin
        st1_m_fifo_b_m_size_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_254_p0 = ($signed(sext_ln1495_fu_244_p1) + $signed(9'd1));

assign grp_fu_254_p1 = 9'd10;

assign grp_fu_293_p0 = ($signed(sext_ln1495_1_fu_283_p1) + $signed(9'd1));

assign grp_fu_293_p1 = 9'd10;

assign i_V_2_fu_229_p2 = (ap_sig_allocacmp_i_V_1 + 3'd1);

assign icmp_ln1019_1_fu_274_p2 = ((st1_m_fifo_b_m_size_V_fu_64 == 8'd10) ? 1'b1 : 1'b0);

assign icmp_ln1019_fu_235_p2 = ((ap_sig_allocacmp_st1_m_fifo_a_m_size_V_2 == 8'd10) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_223_p2 = ((ap_sig_allocacmp_i_V_1 == 3'd4) ? 1'b1 : 1'b0);

assign sext_ln1495_1_fu_283_p0 = ap_sig_allocacmp_lhs_load_1;

assign sext_ln1495_1_fu_283_p1 = sext_ln1495_1_fu_283_p0;

assign sext_ln1495_fu_244_p0 = ap_sig_allocacmp_lhs_1_load_1;

assign sext_ln1495_fu_244_p1 = sext_ln1495_fu_244_p0;

assign sext_ln16_1_fu_348_p1 = st1_m_fifo_b_m_rear_V_fu_344_p1;

assign sext_ln16_fu_318_p1 = st1_m_fifo_a_m_rear_V_fu_314_p1;

assign st1_m_fifo_a_m_arr_cell_V_address0 = zext_ln541_fu_322_p1;

assign st1_m_fifo_a_m_arr_cell_V_d0 = 8'd0;

assign st1_m_fifo_a_m_arr_node_V_address0 = zext_ln541_fu_322_p1;

assign st1_m_fifo_a_m_arr_node_V_d0 = 8'd255;

assign st1_m_fifo_a_m_arr_th_idx_V_address0 = zext_ln541_fu_322_p1;

assign st1_m_fifo_a_m_arr_th_idx_V_d0 = 8'd0;

assign st1_m_fifo_a_m_rear_V_7_out = lhs_1_fu_76;

assign st1_m_fifo_a_m_rear_V_fu_314_p1 = grp_fu_254_p2[4:0];

assign st1_m_fifo_a_m_size_V_3_fu_304_p2 = (st1_m_fifo_a_m_size_V_2_reg_411 + 8'd1);

assign st1_m_fifo_a_m_size_V_out = st1_m_fifo_a_m_size_V_2_reg_411;

assign st1_m_fifo_b_m_arr_cell_V_address0 = zext_ln541_1_fu_352_p1;

assign st1_m_fifo_b_m_arr_cell_V_d0 = 8'd0;

assign st1_m_fifo_b_m_arr_node_V_address0 = zext_ln541_1_fu_352_p1;

assign st1_m_fifo_b_m_arr_node_V_d0 = 8'd255;

assign st1_m_fifo_b_m_arr_th_idx_V_address0 = zext_ln541_1_fu_352_p1;

assign st1_m_fifo_b_m_arr_th_idx_V_d0 = 8'd0;

assign st1_m_fifo_b_m_rear_V_7_out = lhs_fu_72;

assign st1_m_fifo_b_m_rear_V_fu_344_p1 = grp_fu_293_p2[4:0];

assign st1_m_fifo_b_m_size_V_2_fu_334_p2 = (st1_m_fifo_b_m_size_V_1_reg_430 + 8'd1);

assign st1_m_fifo_b_m_size_V_out = st1_m_fifo_b_m_size_V_fu_64;

assign zext_ln541_1_fu_352_p1 = $unsigned(st1_m_fifo_b_m_rear_V_fu_344_p1);

assign zext_ln541_fu_322_p1 = $unsigned(st1_m_fifo_a_m_rear_V_fu_314_p1);

endmodule //simulatedAnnealingTop_exec_pipeline_Pipeline_VITIS_LOOP_6_1
