-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simulatedAnnealingTop_exec_pipeline_Pipeline_VITIS_LOOP_6_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    st1_m_fifo_a_m_arr_th_idx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    st1_m_fifo_a_m_arr_th_idx_V_ce0 : OUT STD_LOGIC;
    st1_m_fifo_a_m_arr_th_idx_V_we0 : OUT STD_LOGIC;
    st1_m_fifo_a_m_arr_th_idx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    st1_m_fifo_a_m_arr_cell_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    st1_m_fifo_a_m_arr_cell_V_ce0 : OUT STD_LOGIC;
    st1_m_fifo_a_m_arr_cell_V_we0 : OUT STD_LOGIC;
    st1_m_fifo_a_m_arr_cell_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    st1_m_fifo_a_m_arr_node_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    st1_m_fifo_a_m_arr_node_V_ce0 : OUT STD_LOGIC;
    st1_m_fifo_a_m_arr_node_V_we0 : OUT STD_LOGIC;
    st1_m_fifo_a_m_arr_node_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    st1_m_fifo_b_m_arr_th_idx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    st1_m_fifo_b_m_arr_th_idx_V_ce0 : OUT STD_LOGIC;
    st1_m_fifo_b_m_arr_th_idx_V_we0 : OUT STD_LOGIC;
    st1_m_fifo_b_m_arr_th_idx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    st1_m_fifo_b_m_arr_cell_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    st1_m_fifo_b_m_arr_cell_V_ce0 : OUT STD_LOGIC;
    st1_m_fifo_b_m_arr_cell_V_we0 : OUT STD_LOGIC;
    st1_m_fifo_b_m_arr_cell_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    st1_m_fifo_b_m_arr_node_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    st1_m_fifo_b_m_arr_node_V_ce0 : OUT STD_LOGIC;
    st1_m_fifo_b_m_arr_node_V_we0 : OUT STD_LOGIC;
    st1_m_fifo_b_m_arr_node_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    st1_m_fifo_a_m_size_V_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    st1_m_fifo_a_m_size_V_out_ap_vld : OUT STD_LOGIC;
    st1_m_fifo_a_m_rear_V_7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    st1_m_fifo_a_m_rear_V_7_out_ap_vld : OUT STD_LOGIC;
    st1_m_fifo_b_m_size_V_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    st1_m_fifo_b_m_size_V_out_ap_vld : OUT STD_LOGIC;
    st1_m_fifo_b_m_rear_V_7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    st1_m_fifo_b_m_rear_V_7_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of simulatedAnnealingTop_exec_pipeline_Pipeline_VITIS_LOOP_6_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_A : STD_LOGIC_VECTOR (8 downto 0) := "000001010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln1027_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal st1_m_fifo_a_m_size_V_2_reg_411 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1027_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_421 : STD_LOGIC_VECTOR (0 downto 0);
    signal st1_m_fifo_b_m_size_V_1_reg_430 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln1019_1_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_435 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln541_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln541_1_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_V_fu_60 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_2_fu_229_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_V_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal st1_m_fifo_b_m_size_V_fu_64 : STD_LOGIC_VECTOR (7 downto 0);
    signal st1_m_fifo_b_m_size_V_2_fu_334_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal st1_m_fifo_a_m_size_V_fu_68 : STD_LOGIC_VECTOR (7 downto 0);
    signal st1_m_fifo_a_m_size_V_3_fu_304_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_sig_allocacmp_st1_m_fifo_a_m_size_V_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_fu_72 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln16_1_fu_348_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_lhs_load_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_1_fu_76 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln16_fu_318_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_lhs_1_load_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal sext_ln1495_fu_244_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1495_fu_244_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1495_1_fu_283_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1495_1_fu_283_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_293_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal st1_m_fifo_a_m_rear_V_fu_314_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal st1_m_fifo_b_m_rear_V_fu_344_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component simulatedAnnealingTop_srem_9ns_5ns_5_13_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component simulatedAnnealingTop_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    srem_9ns_5ns_5_13_1_U12 : component simulatedAnnealingTop_srem_9ns_5ns_5_13_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_254_p0,
        din1 => grp_fu_254_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_254_p2);

    srem_9ns_5ns_5_13_1_U13 : component simulatedAnnealingTop_srem_9ns_5ns_5_13_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_293_p0,
        din1 => grp_fu_293_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_293_p2);

    flow_control_loop_pipe_sequential_init_U : component simulatedAnnealingTop_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1027_fu_223_p2 = ap_const_lv1_0))) then 
                    i_V_fu_60 <= i_V_2_fu_229_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_V_fu_60 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    lhs_1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    lhs_1_fu_76 <= ap_const_lv8_FF;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1019_reg_421 = ap_const_lv1_0))) then 
                    lhs_1_fu_76 <= sext_ln16_fu_318_p1;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                lhs_fu_72 <= ap_const_lv8_FF;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1019_1_reg_435 = ap_const_lv1_0))) then 
                lhs_fu_72 <= sext_ln16_1_fu_348_p1;
            end if; 
        end if;
    end process;

    st1_m_fifo_a_m_size_V_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1019_fu_235_p2 = ap_const_lv1_1) and (icmp_ln1027_fu_223_p2 = ap_const_lv1_0))) then 
                st1_m_fifo_a_m_size_V_fu_68 <= ap_const_lv8_A;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                st1_m_fifo_a_m_size_V_fu_68 <= ap_const_lv8_0;
            elsif (((icmp_ln1027_reg_417 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (icmp_ln1019_reg_421 = ap_const_lv1_0))) then 
                st1_m_fifo_a_m_size_V_fu_68 <= st1_m_fifo_a_m_size_V_3_fu_304_p2;
            end if; 
        end if;
    end process;

    st1_m_fifo_b_m_size_V_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                st1_m_fifo_b_m_size_V_fu_64 <= ap_const_lv8_0;
            elsif (((icmp_ln1027_reg_417 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1019_1_fu_274_p2 = ap_const_lv1_1))) then 
                st1_m_fifo_b_m_size_V_fu_64 <= ap_const_lv8_A;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1019_1_reg_435 = ap_const_lv1_0))) then 
                st1_m_fifo_b_m_size_V_fu_64 <= st1_m_fifo_b_m_size_V_2_fu_334_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_417 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln1019_1_reg_435 <= icmp_ln1019_1_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_223_p2 = ap_const_lv1_0))) then
                icmp_ln1019_reg_421 <= icmp_ln1019_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1027_reg_417 <= icmp_ln1027_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                st1_m_fifo_a_m_size_V_2_reg_411 <= ap_sig_allocacmp_st1_m_fifo_a_m_size_V_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                st1_m_fifo_b_m_size_V_1_reg_430 <= st1_m_fifo_b_m_size_V_fu_64;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage11_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1027_reg_417)
    begin
        if (((icmp_ln1027_reg_417 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_V_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_V_fu_60, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_V_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_V_1 <= i_V_fu_60;
        end if; 
    end process;


    ap_sig_allocacmp_lhs_1_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1019_reg_421, ap_block_pp0_stage0, ap_loop_init, lhs_1_fu_76, sext_ln16_fu_318_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_lhs_1_load_1 <= ap_const_lv8_FF;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1019_reg_421 = ap_const_lv1_0))) then 
                ap_sig_allocacmp_lhs_1_load_1 <= sext_ln16_fu_318_p1;
            else 
                ap_sig_allocacmp_lhs_1_load_1 <= lhs_1_fu_76;
            end if;
        else 
            ap_sig_allocacmp_lhs_1_load_1 <= lhs_1_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_lhs_load_1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln1019_1_reg_435, ap_block_pp0_stage1, lhs_fu_72, sext_ln16_1_fu_348_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1019_1_reg_435 = ap_const_lv1_0))) then 
            ap_sig_allocacmp_lhs_load_1 <= sext_ln16_1_fu_348_p1;
        else 
            ap_sig_allocacmp_lhs_load_1 <= lhs_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_st1_m_fifo_a_m_size_V_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, st1_m_fifo_a_m_size_V_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_st1_m_fifo_a_m_size_V_2 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_st1_m_fifo_a_m_size_V_2 <= st1_m_fifo_a_m_size_V_fu_68;
        end if; 
    end process;

    grp_fu_254_p0 <= std_logic_vector(signed(sext_ln1495_fu_244_p1) + signed(ap_const_lv9_1));
    grp_fu_254_p1 <= ap_const_lv9_A(5 - 1 downto 0);
    grp_fu_293_p0 <= std_logic_vector(signed(sext_ln1495_1_fu_283_p1) + signed(ap_const_lv9_1));
    grp_fu_293_p1 <= ap_const_lv9_A(5 - 1 downto 0);
    i_V_2_fu_229_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_V_1) + unsigned(ap_const_lv3_1));
    icmp_ln1019_1_fu_274_p2 <= "1" when (st1_m_fifo_b_m_size_V_fu_64 = ap_const_lv8_A) else "0";
    icmp_ln1019_fu_235_p2 <= "1" when (ap_sig_allocacmp_st1_m_fifo_a_m_size_V_2 = ap_const_lv8_A) else "0";
    icmp_ln1027_fu_223_p2 <= "1" when (ap_sig_allocacmp_i_V_1 = ap_const_lv3_4) else "0";
    sext_ln1495_1_fu_283_p0 <= ap_sig_allocacmp_lhs_load_1;
        sext_ln1495_1_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1495_1_fu_283_p0),9));

    sext_ln1495_fu_244_p0 <= ap_sig_allocacmp_lhs_1_load_1;
        sext_ln1495_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1495_fu_244_p0),9));

        sext_ln16_1_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(st1_m_fifo_b_m_rear_V_fu_344_p1),8));

        sext_ln16_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(st1_m_fifo_a_m_rear_V_fu_314_p1),8));

    st1_m_fifo_a_m_arr_cell_V_address0 <= zext_ln541_fu_322_p1(4 - 1 downto 0);

    st1_m_fifo_a_m_arr_cell_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            st1_m_fifo_a_m_arr_cell_V_ce0 <= ap_const_logic_1;
        else 
            st1_m_fifo_a_m_arr_cell_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_a_m_arr_cell_V_d0 <= ap_const_lv8_0;

    st1_m_fifo_a_m_arr_cell_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln1019_reg_421)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1019_reg_421 = ap_const_lv1_0))) then 
            st1_m_fifo_a_m_arr_cell_V_we0 <= ap_const_logic_1;
        else 
            st1_m_fifo_a_m_arr_cell_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_a_m_arr_node_V_address0 <= zext_ln541_fu_322_p1(4 - 1 downto 0);

    st1_m_fifo_a_m_arr_node_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            st1_m_fifo_a_m_arr_node_V_ce0 <= ap_const_logic_1;
        else 
            st1_m_fifo_a_m_arr_node_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_a_m_arr_node_V_d0 <= ap_const_lv8_FF;

    st1_m_fifo_a_m_arr_node_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln1019_reg_421)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1019_reg_421 = ap_const_lv1_0))) then 
            st1_m_fifo_a_m_arr_node_V_we0 <= ap_const_logic_1;
        else 
            st1_m_fifo_a_m_arr_node_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_a_m_arr_th_idx_V_address0 <= zext_ln541_fu_322_p1(4 - 1 downto 0);

    st1_m_fifo_a_m_arr_th_idx_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            st1_m_fifo_a_m_arr_th_idx_V_ce0 <= ap_const_logic_1;
        else 
            st1_m_fifo_a_m_arr_th_idx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_a_m_arr_th_idx_V_d0 <= ap_const_lv8_0;

    st1_m_fifo_a_m_arr_th_idx_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln1019_reg_421)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1019_reg_421 = ap_const_lv1_0))) then 
            st1_m_fifo_a_m_arr_th_idx_V_we0 <= ap_const_logic_1;
        else 
            st1_m_fifo_a_m_arr_th_idx_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_a_m_rear_V_7_out <= lhs_1_fu_76;

    st1_m_fifo_a_m_rear_V_7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1027_reg_417, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1027_reg_417 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            st1_m_fifo_a_m_rear_V_7_out_ap_vld <= ap_const_logic_1;
        else 
            st1_m_fifo_a_m_rear_V_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_a_m_rear_V_fu_314_p1 <= grp_fu_254_p2(5 - 1 downto 0);
    st1_m_fifo_a_m_size_V_3_fu_304_p2 <= std_logic_vector(unsigned(st1_m_fifo_a_m_size_V_2_reg_411) + unsigned(ap_const_lv8_1));
    st1_m_fifo_a_m_size_V_out <= st1_m_fifo_a_m_size_V_2_reg_411;

    st1_m_fifo_a_m_size_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1027_reg_417, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1027_reg_417 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            st1_m_fifo_a_m_size_V_out_ap_vld <= ap_const_logic_1;
        else 
            st1_m_fifo_a_m_size_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_b_m_arr_cell_V_address0 <= zext_ln541_1_fu_352_p1(4 - 1 downto 0);

    st1_m_fifo_b_m_arr_cell_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            st1_m_fifo_b_m_arr_cell_V_ce0 <= ap_const_logic_1;
        else 
            st1_m_fifo_b_m_arr_cell_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_b_m_arr_cell_V_d0 <= ap_const_lv8_0;

    st1_m_fifo_b_m_arr_cell_V_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln1019_1_reg_435)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1019_1_reg_435 = ap_const_lv1_0))) then 
            st1_m_fifo_b_m_arr_cell_V_we0 <= ap_const_logic_1;
        else 
            st1_m_fifo_b_m_arr_cell_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_b_m_arr_node_V_address0 <= zext_ln541_1_fu_352_p1(4 - 1 downto 0);

    st1_m_fifo_b_m_arr_node_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            st1_m_fifo_b_m_arr_node_V_ce0 <= ap_const_logic_1;
        else 
            st1_m_fifo_b_m_arr_node_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_b_m_arr_node_V_d0 <= ap_const_lv8_FF;

    st1_m_fifo_b_m_arr_node_V_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln1019_1_reg_435)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1019_1_reg_435 = ap_const_lv1_0))) then 
            st1_m_fifo_b_m_arr_node_V_we0 <= ap_const_logic_1;
        else 
            st1_m_fifo_b_m_arr_node_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_b_m_arr_th_idx_V_address0 <= zext_ln541_1_fu_352_p1(4 - 1 downto 0);

    st1_m_fifo_b_m_arr_th_idx_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            st1_m_fifo_b_m_arr_th_idx_V_ce0 <= ap_const_logic_1;
        else 
            st1_m_fifo_b_m_arr_th_idx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_b_m_arr_th_idx_V_d0 <= ap_const_lv8_0;

    st1_m_fifo_b_m_arr_th_idx_V_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln1019_1_reg_435)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1019_1_reg_435 = ap_const_lv1_0))) then 
            st1_m_fifo_b_m_arr_th_idx_V_we0 <= ap_const_logic_1;
        else 
            st1_m_fifo_b_m_arr_th_idx_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_b_m_rear_V_7_out <= lhs_fu_72;

    st1_m_fifo_b_m_rear_V_7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1027_reg_417, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1027_reg_417 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            st1_m_fifo_b_m_rear_V_7_out_ap_vld <= ap_const_logic_1;
        else 
            st1_m_fifo_b_m_rear_V_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    st1_m_fifo_b_m_rear_V_fu_344_p1 <= grp_fu_293_p2(5 - 1 downto 0);
    st1_m_fifo_b_m_size_V_2_fu_334_p2 <= std_logic_vector(unsigned(st1_m_fifo_b_m_size_V_1_reg_430) + unsigned(ap_const_lv8_1));
    st1_m_fifo_b_m_size_V_out <= st1_m_fifo_b_m_size_V_fu_64;

    st1_m_fifo_b_m_size_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1027_reg_417, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1027_reg_417 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            st1_m_fifo_b_m_size_V_out_ap_vld <= ap_const_logic_1;
        else 
            st1_m_fifo_b_m_size_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln541_1_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(st1_m_fifo_b_m_rear_V_fu_344_p1),64));
    zext_ln541_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(st1_m_fifo_a_m_rear_V_fu_314_p1),64));
end behav;
